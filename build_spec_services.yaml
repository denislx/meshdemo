version: 0.1             
component: build
timeoutInSeconds: 5000
shell: bash
env:
  exportedVariables:
steps:
  - type: Command
    command: |
      yum -y install jq
      export docker_pass=$(oci secrets secret-bundle get --secret-id ocid1.vaultsecret.oc1.eu-amsterdam-1.amaaaaaauevftmqa2vodnotrpnxe2lutj2foenstze5gzpuxyswnrnrworga --query "data.\"secret-bundle-content\".content" | tr -d '"' | base64 -d)
      docker login ams.ocir.io -u 'frsxwtjslf35/oracleidentitycloudservice/mika.rinne@oracle.com' -p ${docker_pass}
      # Generate Mesh name dynamically
      export version=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-6 | rev`
      echo "Version: ${version}"
      export meshdemo_version=$(oci service-mesh mesh list --compartment-id ocid1.compartment.oc1..aaaaaaaabwqnkg5r4sgb72edair3gaxqckws6p2qgxlyq67mnnqxvntwm4vq --all | jq '.data.items[] | select(."lifecycle-state" == "ACTIVE") | ."display-name"' | tr -d '"')
      if [ -n "${meshdemo_version}" ]; then
          echo "Mesh: ${meshdemo_version}"
          chmod +x ./kubectl
          oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.eu-amsterdam-1.aaaaaaaasljp3fqfq5pt32nnic5qs4njo45dmtaanwq2ccxnyckxcyljtn7q --file kconfig --region eu-amsterdam-1 --token-version 2.0.0  --kube-endpoint PUBLIC_ENDPOINT
          export KUBECONFIG="kconfig"
          # BUILD HOME v1 - STATIC
          cd ./home/
          cp ./html/pricing/index_static.html ./html/pricing/index.html
          docker build -t ams.ocir.io/frsxwtjslf35/meshdemo-homesvc:v1-${version} .
          docker push ams.ocir.io/frsxwtjslf35/meshdemo-homesvc:v1-${version}
          # BUILD HOME v2 - DYNAMIC 
          cp ./html/pricing/index_dynamic.html ./html/pricing/index.html
          docker build -t ams.ocir.io/frsxwtjslf35/meshdemo-homesvc:v2-${version} .
          docker push ams.ocir.io/frsxwtjslf35/meshdemo-homesvc:v2-${version}
          cd ..
          # BUILD PRICE v1 
          sed -i "s/atp_pwd/${password}/g" ./price/price.js
          export tries=0
          export atp_status=''
          while [ $tries -le 30 ] && [[ $atp_status != 'Active' ]] 
          do
              atp_status=$(./kubectl get AutonomousDatabases -n ${meshdemo_version} -o json | jq '.items[]'.status.status.conditions[].type)
              if [ "$atp_status" != "" ]; then
               atp_status=$(./kubectl get AutonomousDatabases -n ${meshdemo_version} -o json | jq '.items[].status.status.conditions[] | select(."type" == "Active") | .type' | tr -d '"')
              fi
              echo "atp status: $tries $atp_status"
              tries=$(( $tries + 1 ))
              sleep 5
          done
          mkdir -p ./price/Wallet
          ./kubectl get secret wallet -n ${meshdemo_version} -o jsonpath='{.data}' | jq '."tnsnames.ora"' | tr -d '"' | base64 --decode > ./price/Wallet/tnsnames.ora
          ./kubectl get secret wallet -n ${meshdemo_version} -o jsonpath='{.data}' | jq '."sqlnet.ora"' | tr -d '"' | base64 --decode > ./price/Wallet/sqlnet.ora
          ./kubectl get secret wallet -n ${meshdemo_version} -o jsonpath='{.data}' | jq '."cwallet.sso"' | tr -d '"' | base64 --decode > ./price/Wallet/cwallet.sso
          sed -i "s|"?/network/admin"|"./Wallet"|g" ./price/Wallet/sqlnet.ora
          cd ./price/Wallet
          zip ./Wallet.zip *
          cd ../..
          mdkir ./Wallet
          mv ./price/Wallet/Wallet.zip ./Wallet
          # Run Liquibase to Create the database
          build_spec_services.yaml
          ls
          ls ./Wallet
          wget ${jdk} -q
          tar -xzf jdk-11.0.16_linux-x64_bin.tar.gz
          export PATH=./jdk-11.0.16/bin:$PATH
          export JAVA_HOME=./jdk-11.0.16
          wget ${sqlcli_client} -q
          unzip V1022102-01.zip
          sed -i "s/atp_pwd/${password}/g" ./create_apex.sh
          sh ./create_apex.sh
          cd ./price/
          wget ${instant_client} -q
          docker build -t ams.ocir.io/frsxwtjslf35/meshdemo-pricesvc:v1-${version} .
          docker push ams.ocir.io/frsxwtjslf35/meshdemo-pricesvc:v1-${version}
          cd ..
          ./kubectl create secret generic admin-secret --from-literal=password=${password} -n ${meshdemo_version}
          ./kubectl create secret generic wallet-secret --from-literal=walletPassword=${password} -n ${meshdemo_version}
          sed -i "s/tag/${version}/g" app.yaml
          sed -i "s/meshdemo_version/${meshdemo_version}/g" app.yaml
          sed -i "s/tag/${version}/g" app.yaml
          ./kubectl delete deployment home-v1 -n $meshdemo_version
          ./kubectl delete deployment home-v2 -n $meshdemo_version
          ./kubectl delete deployment price-v1 -n $meshdemo_version
          ./kubectl create -f app.yaml &
      fi